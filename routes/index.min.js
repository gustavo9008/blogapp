const express=require("express"),router=express.Router(),passport=require("passport"),User=require("../models/user"),middleWare=require("../middleware/loginMiddleWare"),multer=require("multer"),upload=multer({dest:"uploads/"}),async=require("async"),nodemailer=require("nodemailer"),crypto=require("crypto");router.get("/blogs/login",(req,res)=>{res.render("login")}),router.post("/blogs/login",passport.authenticate("local",{failureFlash:!0,failureRedirect:"/blogs/login"}),(req,res)=>{const redirectUrl=req.session.returnTo||"/blogs";delete req.session.returnTo,User.findById(req.user,(err,user)=>err?(req.flash("error","oh no we cant find what you are looking for, try again later ðŸ˜ž"),res.redirect("back")):!1===user.profileRegistered?(req.flash("error","Welcome back, please create profile before continuing"),res.redirect("/blogs/register-profile")):(req.flash("success","Welcome back ðŸ˜Š"),res.redirect(redirectUrl)))}),router.get("/blogs/register",(req,res)=>{res.render("register")}),router.post("/blogs/register",(req,res)=>{req.body.username,req.body.passbody;let profileRegistered=!1;User.register(new User({name:req.body.name,email:req.body.email,profileRegistered:!1,username:req.body.username}),req.body.password,(err,user)=>{if(err){if(err.keyPattern)return req.flash("error","A user with the given email is already registered"),res.redirect("back");if("UserExistsError"===err.name)return req.flash("error",err.message),res.redirect("back")}passport.authenticate("local")(req,res,()=>res.redirect("/blogs/register-profile"))})}),router.get("/blogs/logout",(req,res)=>(req.logout(),req.flash("success","You have been logged out!"),res.redirect("/blogs"))),router.put("/blogs/changeuser",middleWare.isLoggedIn,(req,res)=>{let user={name:req.body.name,email:req.body.email,username:req.body.username};User.findByIdAndUpdate(req.user.id,user,(err,updateduser)=>err?err.keyPattern.username?(req.flash("error","Username exists already!"),res.redirect("back")):err.keyPattern.email?(req.flash("error","User with email already exists!"),res.redirect("back")):(req.flash("error","Could not update user profile"),res.redirect("back")):(req.flash("success","Updated User Profile!"),res.redirect("/blogs")))}),router.post("/blogs/changepassword",(function(req,res,next){User.findById(req.user.id,(err,user)=>{if(err)return req.flash("error","oh no something went wrong, try again later."),res.redirect("back");user.changePassword(req.body.oldPassword,req.body.newPassword,(err,changedPassword)=>err?(req.flash("error",err.message),res.redirect("back")):(req.flash("success","You have changed your password.ðŸ™‚ "),res.redirect("back")))})})),router.get("/forgotpassword",(function(req,res){res.render("forgot")})),router.post("/forgotpassword",(function(req,res,next){async.waterfall([function(done){crypto.randomBytes(20,(function(err,buf){var token=buf.toString("hex");done(err,token)}))},function(token,done){User.findOne({email:req.body.email},(function(err,user){if(!user)return req.flash("error","No account with that email address exists."),res.redirect("/forgotpassword");user.resetPasswordToken=token,user.resetPasswordExpires=Date.now()+36e5,user.save((function(err){done(err,token,user)}))}))},function(token,user,done){var smtpTransport=nodemailer.createTransport({service:"Gmail",auth:{user:process.env.GMAIL_NAME,pass:process.env.GMAIL_SECRET}}),mailOptions={to:user.email,from:"dev.me.message@gmail.com",subject:"dev.me Password Reset",text:"You are receiving this because you (or someone else) have requested the reset of the password for your account.\n\nPlease click on the following link, or paste this into your browser to complete the process:\n\nhttp://"+req.headers.host+"/reset/"+token+"\n\nIf you did not request this, please ignore this email and your password will remain unchanged.\n"};smtpTransport.sendMail(mailOptions,(function(err){req.flash("success","An e-mail has been sent to "+user.email+" with further instructions."),done(err,"done")}))}],(function(err){if(err)return next(err);res.redirect("/forgotpassword")}))})),router.get("/reset/:token",(function(req,res){User.findOne({resetPasswordToken:req.params.token,resetPasswordExpires:{$gt:Date.now()}},(function(err,user){if(!user)return req.flash("error","Password reset token is invalid or has expired."),res.redirect("/forgotpassword");res.render("reset",{token:req.params.token})}))})),router.post("/reset/:token",(function(req,res){async.waterfall([function(done){User.findOne({resetPasswordToken:req.params.token,resetPasswordExpires:{$gt:Date.now()}},(function(err,user){return user?req.body.password!==req.body.confirm?(req.flash("error","Passwords do not match."),res.redirect("back")):void user.setPassword(req.body.password,(function(err){user.resetPasswordToken=void 0,user.resetPasswordExpires=void 0,user.save((function(err){req.logIn(user,(function(err){done(err,user)}))}))})):(req.flash("error","Password reset token is invalid or has expired."),res.redirect("back"))}))},function(user,done){var smtpTransport=nodemailer.createTransport({service:"Gmail",auth:{user:process.env.GMAIL_NAME,pass:process.env.GMAIL_SECRET}}),mailOptions={to:user.email,from:process.env.GMAIL_NAME,subject:"Your password has been changed",text:`Hello, ${user.name}\n\nThis is a confirmation that the password for your dev.me account ${user.email} has just been changed.\n`};smtpTransport.sendMail(mailOptions,(function(err){req.flash("success","Success! Your password has been changed."),done(err)}))}],(function(err){res.redirect("/blogs")}))})),router.get("/notfound",(req,res)=>{res.render("errorPages/notFound")}),module.exports=router;